# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_core.ipynb (unless otherwise specified).

__all__ = ['ROOT_DIR', 'DOWNLOAD_DIR_BASE', 'PROCESSED_DIR_BASE', 'DATASET_DIR', 'create_country_dirs', 'gen_weekdates',
           'STANDARD_WEEK']

# Cell
from .imports import *

# Cell
ROOT_DIR = Path('..').absolute().expanduser()
DOWNLOAD_DIR_BASE = ROOT_DIR / '_downloads'
PROCESSED_DIR_BASE = ROOT_DIR / '_processed'

DATASET_DIR = ROOT_DIR / 'dataset'

# Cell
def create_country_dirs(country):

    down_dir = DOWNLOAD_DIR_BASE / country
    proc_dir = PROCESSED_DIR_BASE / country
    for _dir in [down_dir, proc_dir]:
        _dir.mkdir(exist_ok=True, parents=True)
    return down_dir, proc_dir

# Cell
def _next_weekday(date, weekday=6):
    '''
    Returns date of next specified weekday. 0 - Monday, 6 - Sunday.
    '''
    while True:
        if date.weekday() == weekday:
            return date
        date += datetime.timedelta(1)

# Cell
def gen_weekdates(year, start=None, week_end=6):
    '''
    Generates start and end dates for a given year.
    '''
    if start is None:
        start = datetime.date(year, 1, 1)
    week = 0
    end = _next_weekday(start, week_end)

    assert end.year == year

    while True:

        yield year, week, start, end
        week += 1

        start = end + datetime.timedelta(1)
        end = start + datetime.timedelta(6)

        if start.year != year:
            break

        if end.year != year:
            end = datetime.date(year, 12, 31)


# Cell
STANDARD_WEEK = pd.DataFrame(itertools.chain(*[gen_weekdates(year) for year in range(2017, 2021)]))

STANDARD_WEEK.columns = ['Year', 'Week', 'Start', 'End']